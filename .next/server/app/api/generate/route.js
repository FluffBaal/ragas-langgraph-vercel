"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate/route";
exports.ids = ["app/api/generate/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "@langchain/core/documents":
/*!********************************************!*\
  !*** external "@langchain/core/documents" ***!
  \********************************************/
/***/ ((module) => {

module.exports = import("@langchain/core/documents");;

/***/ }),

/***/ "@langchain/core/prompts":
/*!******************************************!*\
  !*** external "@langchain/core/prompts" ***!
  \******************************************/
/***/ ((module) => {

module.exports = import("@langchain/core/prompts");;

/***/ }),

/***/ "@langchain/openai":
/*!************************************!*\
  !*** external "@langchain/openai" ***!
  \************************************/
/***/ ((module) => {

module.exports = import("@langchain/openai");;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_fluff_baal_repos_Aim_Assignment_7_8_Real_assignment_07_ragas_langgraph_vercel_src_app_api_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/generate/route.ts */ \"(rsc)/./src/app/api/generate/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_home_fluff_baal_repos_Aim_Assignment_7_8_Real_assignment_07_ragas_langgraph_vercel_src_app_api_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_home_fluff_baal_repos_Aim_Assignment_7_8_Real_assignment_07_ragas_langgraph_vercel_src_app_api_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate/route\",\n        pathname: \"/api/generate\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate/route\"\n    },\n    resolvedPagePath: \"/home/fluff_baal/repos/Aim-Assignment-7-8/Real assignment 07/ragas-langgraph-vercel/src/app/api/generate/route.ts\",\n    nextConfigOutput,\n    userland: _home_fluff_baal_repos_Aim_Assignment_7_8_Real_assignment_07_ragas_langgraph_vercel_src_app_api_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZ2VuZXJhdGUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZnZW5lcmF0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGZmx1ZmZfYmFhbCUyRnJlcG9zJTJGQWltLUFzc2lnbm1lbnQtNy04JTJGUmVhbCUyMGFzc2lnbm1lbnQlMjAwNyUyRnJhZ2FzLWxhbmdncmFwaC12ZXJjZWwlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZmbHVmZl9iYWFsJTJGcmVwb3MlMkZBaW0tQXNzaWdubWVudC03LTglMkZSZWFsJTIwYXNzaWdubWVudCUyMDA3JTJGcmFnYXMtbGFuZ2dyYXBoLXZlcmNlbCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDaUU7QUFDOUk7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWdhcy1sYW5nZ3JhcGgtdmVyY2VsLz80NmIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL2ZsdWZmX2JhYWwvcmVwb3MvQWltLUFzc2lnbm1lbnQtNy04L1JlYWwgYXNzaWdubWVudCAwNy9yYWdhcy1sYW5nZ3JhcGgtdmVyY2VsL3NyYy9hcHAvYXBpL2dlbmVyYXRlL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nZW5lcmF0ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5lcmF0ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL2ZsdWZmX2JhYWwvcmVwb3MvQWltLUFzc2lnbm1lbnQtNy04L1JlYWwgYXNzaWdubWVudCAwNy9yYWdhcy1sYW5nZ3JhcGgtdmVyY2VsL3NyYy9hcHAvYXBpL2dlbmVyYXRlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9nZW5lcmF0ZS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/generate/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/generate/route.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_ragas_langgraph_implementation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/ragas/langgraph-implementation */ \"(rsc)/./src/lib/ragas/langgraph-implementation.ts\");\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/documents */ \"@langchain/core/documents\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_ragas_langgraph_implementation__WEBPACK_IMPORTED_MODULE_1__, _lib_openai__WEBPACK_IMPORTED_MODULE_2__, _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__]);\n([_lib_ragas_langgraph_implementation__WEBPACK_IMPORTED_MODULE_1__, _lib_openai__WEBPACK_IMPORTED_MODULE_2__, _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nasync function POST(request) {\n    try {\n        // Rate limiting\n        const clientIP = request.ip || request.headers.get(\"x-forwarded-for\") || \"unknown\";\n        if (!_lib_validation__WEBPACK_IMPORTED_MODULE_4__.globalRateLimiter.isAllowed(clientIP)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Rate limit exceeded. Please try again later.\",\n                remainingRequests: _lib_validation__WEBPACK_IMPORTED_MODULE_4__.globalRateLimiter.getRemainingRequests(clientIP)\n            }, {\n                status: 429\n            });\n        }\n        // Parse multipart form data\n        const formData = await request.formData();\n        const configString = formData.get(\"config\");\n        let config;\n        try {\n            config = JSON.parse(configString || \"{}\");\n        } catch  {\n            config = {};\n        }\n        // Validate configuration\n        const configValidation = _lib_validation__WEBPACK_IMPORTED_MODULE_4__.GenerationConfigSchema.safeParse(config);\n        if (!configValidation.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid configuration\",\n                details: configValidation.error.errors\n            }, {\n                status: 400\n            });\n        }\n        const validatedConfig = configValidation.data;\n        // Extract documents\n        const documents = [];\n        let fileIndex = 0;\n        while(true){\n            const file = formData.get(`document_${fileIndex}`);\n            if (!file) break;\n            // Validate file\n            const fileValidation = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_4__.validateFile)(file);\n            if (!fileValidation.valid) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `File ${file.name}: ${fileValidation.error}`\n                }, {\n                    status: 400\n                });\n            }\n            // Read file with proper encoding handling\n            const buffer = await file.arrayBuffer();\n            const decoder = new TextDecoder(\"utf-8\", {\n                fatal: false\n            });\n            const content = decoder.decode(buffer);\n            const contentValidation = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_4__.validateDocumentContent)(content);\n            if (!contentValidation.valid) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `File ${file.name}: ${contentValidation.error}`\n                }, {\n                    status: 400\n                });\n            }\n            documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__.Document({\n                pageContent: content,\n                metadata: {\n                    source: file.name,\n                    size: file.size,\n                    type: file.type,\n                    uploadTimestamp: new Date().toISOString()\n                }\n            }));\n            fileIndex++;\n        }\n        if (documents.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No valid documents provided\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate OpenAI API key\n        const apiKey = validatedConfig.openaiApiKey || process.env.OPENAI_API_KEY;\n        if (!apiKey) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"OpenAI API key is required. Please provide your API key.\"\n            }, {\n                status: 400\n            });\n        }\n        // Initialize OpenAI client with user's API key\n        const llm = (0,_lib_openai__WEBPACK_IMPORTED_MODULE_2__.createOpenAIClient)(apiKey);\n        // Create and run RAGAS LangGraph\n        const ragasGraph = new _lib_ragas_langgraph_implementation__WEBPACK_IMPORTED_MODULE_1__.RAGASLangGraph(llm);\n        const results = await ragasGraph.run(documents);\n        // Apply configuration filters\n        let filteredResults = {\n            ...results\n        };\n        // Limit number of questions if specified\n        if (validatedConfig.maxQuestions < results.evolved_questions.length) {\n            const limitedQuestions = results.evolved_questions.slice(0, validatedConfig.maxQuestions);\n            const limitedQuestionIds = new Set(limitedQuestions.map((q)=>q.id));\n            filteredResults = {\n                ...results,\n                evolved_questions: limitedQuestions,\n                question_answers: results.question_answers.filter((qa)=>limitedQuestionIds.has(qa.question_id)),\n                question_contexts: results.question_contexts.filter((qc)=>limitedQuestionIds.has(qc.question_id)),\n                generation_metadata: {\n                    ...results.generation_metadata,\n                    total_questions: limitedQuestions.length,\n                    evolution_types_count: {\n                        simple: limitedQuestions.filter((q)=>q.evolution_type === \"simple\").length,\n                        multi_context: limitedQuestions.filter((q)=>q.evolution_type === \"multi_context\").length,\n                        reasoning: limitedQuestions.filter((q)=>q.evolution_type === \"reasoning\").length\n                    }\n                }\n            };\n        }\n        // Filter by evolution types if specified\n        if (validatedConfig.evolutionTypes.length < 3) {\n            const allowedTypes = new Set(validatedConfig.evolutionTypes);\n            const filteredQuestions = filteredResults.evolved_questions.filter((q)=>allowedTypes.has(q.evolution_type));\n            const filteredQuestionIds = new Set(filteredQuestions.map((q)=>q.id));\n            filteredResults = {\n                ...filteredResults,\n                evolved_questions: filteredQuestions,\n                question_answers: filteredResults.question_answers.filter((qa)=>filteredQuestionIds.has(qa.question_id)),\n                question_contexts: filteredResults.question_contexts.filter((qc)=>filteredQuestionIds.has(qc.question_id)),\n                generation_metadata: {\n                    ...filteredResults.generation_metadata,\n                    total_questions: filteredQuestions.length,\n                    evolution_types_count: {\n                        simple: filteredQuestions.filter((q)=>q.evolution_type === \"simple\").length,\n                        multi_context: filteredQuestions.filter((q)=>q.evolution_type === \"multi_context\").length,\n                        reasoning: filteredQuestions.filter((q)=>q.evolution_type === \"reasoning\").length\n                    }\n                }\n            };\n        }\n        // Return results\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(filteredResults, {\n            status: 200,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Cache-Control\": \"no-cache\",\n                \"Access-Control-Allow-Origin\": \"*\",\n                \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n                \"Access-Control-Allow-Headers\": \"Content-Type\"\n            }\n        });\n    } catch (error) {\n        console.error(\"Generation error:\", error);\n        if (error instanceof Error) {\n            if (error.message.includes(\"rate limit\")) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Rate limit exceeded. Please try again later.\"\n                }, {\n                    status: 429\n                });\n            }\n            if (error.message.includes(\"token limit\") || error.message.includes(\"context length\")) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Document too large. Please reduce document size.\"\n                }, {\n                    status: 413\n                });\n            }\n            if (error.message.includes(\"API key\") || error.message.includes(\"authentication\")) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"OpenAI API configuration error.\"\n                }, {\n                    status: 500\n                });\n            }\n            if (error.message.includes(\"timeout\")) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Request timeout. Please try again with smaller documents.\"\n                }, {\n                    status: 408\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\",\n            message:  true ? error instanceof Error ? error.message : \"Unknown error\" : 0\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        message: \"RAGAS LangGraph Generation API\",\n        version: \"1.0.0\",\n        status: \"operational\",\n        endpoints: {\n            POST: \"Generate synthetic data from documents\",\n            GET: \"API information\"\n        },\n        limits: {\n            maxFileSize: \"10MB\",\n            maxFiles: 10,\n            supportedFormats: [\n                \".txt\",\n                \".md\",\n                \".pdf\"\n            ]\n        }\n    }, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\nasync function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\",\n            \"Access-Control-Max-Age\": \"86400\"\n        }\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/generate/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/openai.ts":
/*!***************************!*\
  !*** ./src/lib/openai.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAIClient: () => (/* binding */ createOpenAIClient),\n/* harmony export */   validateOpenAIConfig: () => (/* binding */ validateOpenAIConfig)\n/* harmony export */ });\n/* harmony import */ var _langchain_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/openai */ \"@langchain/openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_langchain_openai__WEBPACK_IMPORTED_MODULE_0__]);\n_langchain_openai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nfunction createOpenAIClient(userApiKey) {\n    const apiKey = userApiKey || process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"OpenAI API key is required\");\n    }\n    return new _langchain_openai__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI({\n        openAIApiKey: apiKey,\n        modelName: \"gpt-4.1-mini\" || 0,\n        temperature: 0.7,\n        maxTokens: 2000,\n        timeout: 60000,\n        maxRetries: 3\n    });\n}\nfunction validateOpenAIConfig() {\n    return !!process.env.OPENAI_API_KEY;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL29wZW5haS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0M7QUFFeEMsU0FBU0MsbUJBQW1CQyxVQUFtQjtJQUNwRCxNQUFNQyxTQUFTRCxjQUFjRSxRQUFRQyxHQUFHLENBQUNDLGNBQWM7SUFFdkQsSUFBSSxDQUFDSCxRQUFRO1FBQ1gsTUFBTSxJQUFJSSxNQUFNO0lBQ2xCO0lBRUEsT0FBTyxJQUFJUCx5REFBVUEsQ0FBQztRQUNwQlEsY0FBY0w7UUFDZE0sV0FBV0wsY0FBd0IsSUFBSTtRQUN2Q08sYUFBYTtRQUNiQyxXQUFXO1FBQ1hDLFNBQVM7UUFDVEMsWUFBWTtJQUNkO0FBQ0Y7QUFFTyxTQUFTQztJQUNkLE9BQU8sQ0FBQyxDQUFDWCxRQUFRQyxHQUFHLENBQUNDLGNBQWM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWdhcy1sYW5nZ3JhcGgtdmVyY2VsLy4vc3JjL2xpYi9vcGVuYWkudHM/YTVjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGF0T3BlbkFJIH0gZnJvbSAnQGxhbmdjaGFpbi9vcGVuYWknO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlbkFJQ2xpZW50KHVzZXJBcGlLZXk/OiBzdHJpbmcpOiBDaGF0T3BlbkFJIHtcbiAgY29uc3QgYXBpS2V5ID0gdXNlckFwaUtleSB8fCBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWTtcbiAgXG4gIGlmICghYXBpS2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPcGVuQUkgQVBJIGtleSBpcyByZXF1aXJlZCcpO1xuICB9XG4gIFxuICByZXR1cm4gbmV3IENoYXRPcGVuQUkoe1xuICAgIG9wZW5BSUFwaUtleTogYXBpS2V5LFxuICAgIG1vZGVsTmFtZTogcHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMIHx8ICdncHQtNC4xLW1pbmknLFxuICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4gICAgbWF4VG9rZW5zOiAyMDAwLFxuICAgIHRpbWVvdXQ6IDYwMDAwLFxuICAgIG1heFJldHJpZXM6IDMsXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcGVuQUlDb25maWcoKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIXByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xufVxuXG4iXSwibmFtZXMiOlsiQ2hhdE9wZW5BSSIsImNyZWF0ZU9wZW5BSUNsaWVudCIsInVzZXJBcGlLZXkiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJFcnJvciIsIm9wZW5BSUFwaUtleSIsIm1vZGVsTmFtZSIsIk9QRU5BSV9NT0RFTCIsInRlbXBlcmF0dXJlIiwibWF4VG9rZW5zIiwidGltZW91dCIsIm1heFJldHJpZXMiLCJ2YWxpZGF0ZU9wZW5BSUNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ragas/langgraph-implementation.ts":
/*!***************************************************!*\
  !*** ./src/lib/ragas/langgraph-implementation.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RAGASLangGraph: () => (/* binding */ RAGASLangGraph)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"@langchain/core/prompts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__]);\n_langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Simple graph implementation without external langgraph dependency\nclass SimpleGraph {\n    addNode(name, func) {\n        this.nodes.set(name, func);\n    }\n    addEdge(from, to) {\n        this.edges.set(from, to);\n    }\n    setStart(node) {\n        this.startNode = node;\n    }\n    async invoke(initialState) {\n        let currentState = {\n            ...initialState\n        };\n        let currentNode = this.startNode;\n        while(currentNode && currentNode !== \"END\"){\n            const nodeFunc = this.nodes.get(currentNode);\n            if (!nodeFunc) {\n                throw new Error(`Node ${currentNode} not found`);\n            }\n            const partialState = await nodeFunc(currentState);\n            currentState = {\n                ...currentState,\n                ...partialState\n            };\n            currentNode = this.edges.get(currentNode) || \"END\";\n        }\n        return currentState;\n    }\n    constructor(){\n        this.nodes = new Map();\n        this.edges = new Map();\n        this.startNode = \"\";\n    }\n}\n// Main LangGraph Implementation\nclass RAGASLangGraph {\n    constructor(llm){\n        this.llm = llm;\n        this.graph = this.createGraph();\n    }\n    createGraph() {\n        const workflow = new SimpleGraph();\n        // Add nodes\n        workflow.addNode(\"process_documents\", this.processDocuments.bind(this));\n        workflow.addNode(\"simple_evolution\", this.simpleEvolution.bind(this));\n        workflow.addNode(\"multi_context_evolution\", this.multiContextEvolution.bind(this));\n        workflow.addNode(\"reasoning_evolution\", this.reasoningEvolution.bind(this));\n        workflow.addNode(\"generate_answers\", this.generateAnswers.bind(this));\n        workflow.addNode(\"retrieve_contexts\", this.retrieveContexts.bind(this));\n        // Define edges\n        workflow.setStart(\"process_documents\");\n        workflow.addEdge(\"process_documents\", \"simple_evolution\");\n        workflow.addEdge(\"simple_evolution\", \"multi_context_evolution\");\n        workflow.addEdge(\"multi_context_evolution\", \"reasoning_evolution\");\n        workflow.addEdge(\"reasoning_evolution\", \"generate_answers\");\n        workflow.addEdge(\"generate_answers\", \"retrieve_contexts\");\n        workflow.addEdge(\"retrieve_contexts\", \"END\");\n        return workflow;\n    }\n    // Document Processing Agent\n    async processDocuments(state) {\n        const processed_docs = [];\n        for(let i = 0; i < state.documents.length; i++){\n            const doc = state.documents[i];\n            try {\n                const questions = await this.extractInitialQuestions(doc.pageContent);\n                processed_docs.push({\n                    id: `doc_${i}`,\n                    content: doc.pageContent,\n                    metadata: doc.metadata,\n                    initial_questions: questions\n                });\n            } catch (error) {\n                state.errors.push(`Document processing error: ${error}`);\n            }\n        }\n        return {\n            processed_docs\n        };\n    }\n    async extractInitialQuestions(content) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromTemplate(`\n      Based on the following content, generate 3 basic comprehension questions.\n      Return only the questions, one per line, without numbering.\n      \n      Content: {content}\n    `);\n        try {\n            const chain = prompt.pipe(this.llm);\n            // Use more content but skip header lines if present\n            const contentLines = content.split(\"\\n\");\n            let mainContent = content;\n            // Skip metadata/header lines at the beginning\n            let startIndex = 0;\n            for(let i = 0; i < Math.min(10, contentLines.length); i++){\n                const line = contentLines[i].trim();\n                if (line.match(/^(Date|Version|Author|License|Table of Contents):/i) || line.match(/^#+\\s*$/) || line.length < 10) {\n                    startIndex = i + 1;\n                } else {\n                    break;\n                }\n            }\n            if (startIndex > 0) {\n                mainContent = contentLines.slice(startIndex).join(\"\\n\");\n            }\n            const response = await chain.invoke({\n                content: mainContent.slice(0, 4000)\n            });\n            const questions = response.content.toString().split(\"\\n\").map((q)=>q.trim()).filter((q)=>q && q.endsWith(\"?\")).slice(0, 3);\n            return questions.length > 0 ? questions : [\n                \"What is the main topic discussed in this document?\"\n            ];\n        } catch (error) {\n            return [\n                \"What is the main topic discussed in this document?\"\n            ];\n        }\n    }\n    // Simple Evolution Agent\n    async simpleEvolution(state) {\n        const evolved_questions = [\n            ...state.evolved_questions || []\n        ];\n        const errors = [\n            ...state.errors || []\n        ];\n        for (const doc of state.processed_docs){\n            for (const question of doc.initial_questions){\n                try {\n                    const evolved = await this.evolveQuestionSimple(question, doc.content);\n                    if (evolved) {\n                        evolved_questions.push({\n                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n                            question: evolved,\n                            evolution_type: \"simple\",\n                            complexity_score: 5.0,\n                            source_document_ids: [\n                                doc.id\n                            ],\n                            metadata: {\n                                original_question: question,\n                                evolution_timestamp: new Date().toISOString()\n                            }\n                        });\n                    }\n                } catch (error) {\n                    errors.push(`Simple evolution error: ${error}`);\n                }\n            }\n        }\n        return {\n            evolved_questions,\n            errors\n        };\n    }\n    async evolveQuestionSimple(question, context) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromTemplate(`\n      Evolve the following question to make it more complex and educational.\n      Add constraints, deepen the inquiry, or increase specificity.\n      \n      Original Question: {question}\n      Context: {context}\n      \n      Return only the evolved question:\n    `);\n        try {\n            const chain = prompt.pipe(this.llm);\n            const response = await chain.invoke({\n                question,\n                context: context.slice(0, 1000)\n            });\n            return response.content.toString().trim();\n        } catch (error) {\n            return null;\n        }\n    }\n    // Multi-Context Evolution Agent\n    async multiContextEvolution(state) {\n        const evolved_questions = [\n            ...state.evolved_questions || []\n        ];\n        const errors = [\n            ...state.errors || []\n        ];\n        if (state.processed_docs.length < 2) {\n            errors.push(\"Need at least 2 documents for multi-context evolution\");\n            return {\n                evolved_questions,\n                errors\n            };\n        }\n        // Create questions spanning multiple documents\n        for(let i = 0; i < state.processed_docs.length; i++){\n            for(let j = i + 1; j < Math.min(i + 2, state.processed_docs.length); j++){\n                const doc1 = state.processed_docs[i];\n                const doc2 = state.processed_docs[j];\n                if (doc1.initial_questions.length > 0) {\n                    try {\n                        const evolved = await this.evolveQuestionMultiContext(doc1.initial_questions[0], doc1.content, doc2.content);\n                        if (evolved) {\n                            evolved_questions.push({\n                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n                                question: evolved,\n                                evolution_type: \"multi_context\",\n                                complexity_score: 7.0,\n                                source_document_ids: [\n                                    doc1.id,\n                                    doc2.id\n                                ],\n                                metadata: {\n                                    original_question: doc1.initial_questions[0],\n                                    requires_multiple_contexts: true,\n                                    evolution_timestamp: new Date().toISOString()\n                                }\n                            });\n                        }\n                    } catch (error) {\n                        errors.push(`Multi-context evolution error: ${error}`);\n                    }\n                }\n            }\n        }\n        return {\n            evolved_questions,\n            errors\n        };\n    }\n    async evolveQuestionMultiContext(question, context1, context2) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromTemplate(`\n      Evolve the following question to require synthesis from both contexts.\n      The evolved question should be answerable only by combining information from both sources.\n      \n      Original Question: {question}\n      Context 1: {context1}\n      Context 2: {context2}\n      \n      Return only the evolved question:\n    `);\n        try {\n            const chain = prompt.pipe(this.llm);\n            const response = await chain.invoke({\n                question,\n                context1: context1.slice(0, 800),\n                context2: context2.slice(0, 800)\n            });\n            return response.content.toString().trim();\n        } catch (error) {\n            return null;\n        }\n    }\n    // Reasoning Evolution Agent\n    async reasoningEvolution(state) {\n        const evolved_questions = [\n            ...state.evolved_questions || []\n        ];\n        const errors = [\n            ...state.errors || []\n        ];\n        // Take some existing questions and evolve them for reasoning\n        const existingQuestions = evolved_questions.slice(0, 2);\n        for (const eq of existingQuestions){\n            // Find source context\n            let sourceContext = \"\";\n            for (const doc of state.processed_docs){\n                if (eq.source_document_ids.includes(doc.id)) {\n                    sourceContext = doc.content;\n                    break;\n                }\n            }\n            if (sourceContext) {\n                try {\n                    const evolved = await this.evolveQuestionReasoning(eq.question, sourceContext);\n                    if (evolved) {\n                        evolved_questions.push({\n                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n                            question: evolved,\n                            evolution_type: \"reasoning\",\n                            complexity_score: 8.0,\n                            source_document_ids: eq.source_document_ids,\n                            metadata: {\n                                original_question: eq.question,\n                                requires_reasoning: true,\n                                evolution_timestamp: new Date().toISOString()\n                            }\n                        });\n                    }\n                } catch (error) {\n                    errors.push(`Reasoning evolution error: ${error}`);\n                }\n            }\n        }\n        return {\n            evolved_questions,\n            errors\n        };\n    }\n    async evolveQuestionReasoning(question, context) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromTemplate(`\n      Evolve the following question to require complex reasoning and analysis.\n      The question should test deep understanding, causal reasoning, or critical evaluation.\n      \n      Original Question: {question}\n      Context: {context}\n      \n      Return only the evolved question:\n    `);\n        try {\n            const chain = prompt.pipe(this.llm);\n            const response = await chain.invoke({\n                question,\n                context: context.slice(0, 1000)\n            });\n            return response.content.toString().trim();\n        } catch (error) {\n            return null;\n        }\n    }\n    // Answer Generation Agent\n    async generateAnswers(state) {\n        const question_answers = [];\n        for (const eq of state.evolved_questions){\n            // Find relevant contexts\n            const contexts = [];\n            for (const doc of state.processed_docs){\n                if (eq.source_document_ids.includes(doc.id)) {\n                    contexts.push(doc.content);\n                }\n            }\n            if (contexts.length > 0) {\n                try {\n                    const answer = await this.generateAnswer(eq.question, contexts);\n                    if (answer) {\n                        question_answers.push({\n                            question_id: eq.id,\n                            answer,\n                            confidence_score: 0.85,\n                            source_documents: eq.source_document_ids\n                        });\n                    }\n                } catch (error) {\n                    state.errors.push(`Answer generation error: ${error}`);\n                }\n            }\n        }\n        return {\n            question_answers\n        };\n    }\n    async generateAnswer(question, contexts) {\n        const combinedContext = contexts.join(\"\\n\\n\").slice(0, 2000);\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromTemplate(`\n      Answer the following question based on the provided contexts.\n      Provide a comprehensive answer using only the information in the contexts.\n      \n      Question: {question}\n      Contexts: {contexts}\n      \n      Answer:\n    `);\n        try {\n            const chain = prompt.pipe(this.llm);\n            const response = await chain.invoke({\n                question,\n                contexts: combinedContext\n            });\n            return response.content.toString().trim();\n        } catch (error) {\n            return null;\n        }\n    }\n    // Context Retrieval Agent\n    async retrieveContexts(state) {\n        const question_contexts = [];\n        for (const eq of state.evolved_questions){\n            const contexts = [];\n            const relevance_scores = [];\n            const context_sources = [];\n            // Get contexts from source documents\n            for (const doc of state.processed_docs){\n                if (eq.source_document_ids.includes(doc.id)) {\n                    const passages = this.extractRelevantPassages(eq.question, doc.content);\n                    for (const passage of passages){\n                        contexts.push(passage);\n                        relevance_scores.push(0.8); // Simplified scoring\n                        context_sources.push(doc.id);\n                    }\n                }\n            }\n            if (contexts.length > 0) {\n                question_contexts.push({\n                    question_id: eq.id,\n                    contexts: contexts.slice(0, 3),\n                    relevance_scores: relevance_scores.slice(0, 3),\n                    context_sources: context_sources.slice(0, 3)\n                });\n            }\n        }\n        return {\n            question_contexts\n        };\n    }\n    extractRelevantPassages(question, content) {\n        // Extract meaningful passages from the content\n        const passages = [];\n        // Split content into paragraphs (by double newlines or single newlines)\n        const paragraphs = content.split(/\\n\\n+/).filter((p)=>p.trim().length > 50);\n        if (paragraphs.length === 0) {\n            // If no paragraphs, split by single newlines\n            const lines = content.split(\"\\n\").filter((l)=>l.trim().length > 20);\n            // Group lines into chunks of ~500 characters\n            let currentPassage = \"\";\n            for (const line of lines){\n                if (currentPassage.length + line.length > 500 && currentPassage.length > 100) {\n                    passages.push(currentPassage.trim());\n                    currentPassage = line;\n                } else {\n                    currentPassage += (currentPassage ? \"\\n\" : \"\") + line;\n                }\n            }\n            if (currentPassage.trim().length > 50) {\n                passages.push(currentPassage.trim());\n            }\n        } else {\n            // Use paragraphs as passages, but ensure they're not too short\n            for (const para of paragraphs){\n                if (para.trim().length > 50) {\n                    // Limit passage length to ~1000 characters for better context\n                    if (para.length > 1000) {\n                        passages.push(para.substring(0, 1000) + \"...\");\n                    } else {\n                        passages.push(para.trim());\n                    }\n                }\n            }\n        }\n        // If we still don't have good passages, create chunks from the content\n        if (passages.length === 0 && content.length > 100) {\n            const chunkSize = 500;\n            for(let i = 0; i < content.length; i += chunkSize){\n                const chunk = content.substring(i, Math.min(i + chunkSize, content.length));\n                if (chunk.trim().length > 50) {\n                    passages.push(chunk.trim());\n                }\n            }\n        }\n        // Return up to 3 most relevant passages (in a real implementation, you'd use embeddings)\n        return passages.slice(0, 3);\n    }\n    // Main execution method\n    async run(documents) {\n        const initialState = {\n            documents,\n            processed_docs: [],\n            evolved_questions: [],\n            question_answers: [],\n            question_contexts: [],\n            errors: []\n        };\n        try {\n            const result = await this.graph.invoke(initialState);\n            return {\n                evolved_questions: result.evolved_questions,\n                question_answers: result.question_answers,\n                question_contexts: result.question_contexts,\n                generation_metadata: {\n                    total_questions: result.evolved_questions.length,\n                    evolution_types_count: {\n                        simple: result.evolved_questions.filter((q)=>q.evolution_type === \"simple\").length,\n                        multi_context: result.evolved_questions.filter((q)=>q.evolution_type === \"multi_context\").length,\n                        reasoning: result.evolved_questions.filter((q)=>q.evolution_type === \"reasoning\").length\n                    },\n                    processing_errors: result.errors,\n                    generation_timestamp: new Date().toISOString()\n                }\n            };\n        } catch (error) {\n            throw new Error(`Generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ragas/langgraph-implementation.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentContentSchema: () => (/* binding */ DocumentContentSchema),\n/* harmony export */   FileValidationSchema: () => (/* binding */ FileValidationSchema),\n/* harmony export */   GenerateRequestSchema: () => (/* binding */ GenerateRequestSchema),\n/* harmony export */   GenerationConfigSchema: () => (/* binding */ GenerationConfigSchema),\n/* harmony export */   RateLimiter: () => (/* binding */ RateLimiter),\n/* harmony export */   globalRateLimiter: () => (/* binding */ globalRateLimiter),\n/* harmony export */   validateDocumentContent: () => (/* binding */ validateDocumentContent),\n/* harmony export */   validateFile: () => (/* binding */ validateFile),\n/* harmony export */   validateGenerationConfig: () => (/* binding */ validateGenerationConfig)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n\n// Generation Configuration Schema\nconst GenerationConfigSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    maxQuestions: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(50).default(10),\n    evolutionTypes: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"simple\",\n        \"multi_context\",\n        \"reasoning\"\n    ])).default([\n        \"simple\",\n        \"multi_context\",\n        \"reasoning\"\n    ]),\n    complexityTarget: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(10).default(5),\n    language: zod__WEBPACK_IMPORTED_MODULE_0__.string().default(\"en\"),\n    includeMetadata: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(true),\n    openaiApiKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n// File Validation Schema (kept for reference but using custom validation instead)\nconst FileValidationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n    size: zod__WEBPACK_IMPORTED_MODULE_0__.number().max(10 * 1024 * 1024),\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional() // Made optional since MIME types are unreliable\n});\n// Document Content Schema\nconst DocumentContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(100, \"Document content must be at least 100 characters\"),\n    metadata: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.any()).optional()\n});\n// API Request Schema\nconst GenerateRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    documents: zod__WEBPACK_IMPORTED_MODULE_0__.array(DocumentContentSchema).min(1, \"At least one document is required\"),\n    config: GenerationConfigSchema.optional()\n});\n// Validation Functions\nfunction validateFile(file) {\n    // Check file extension as well as MIME type\n    const fileExtension = file.name.toLowerCase().split(\".\").pop();\n    const validExtensions = [\n        \"txt\",\n        \"md\",\n        \"pdf\"\n    ];\n    if (!validExtensions.includes(fileExtension || \"\")) {\n        return {\n            valid: false,\n            error: \"Invalid file type. Only .txt, .md, and .pdf files are allowed.\"\n        };\n    }\n    // Check file size\n    if (file.size > 10 * 1024 * 1024) {\n        return {\n            valid: false,\n            error: \"File too large (max 10MB)\"\n        };\n    }\n    // If extension is valid, don't strictly check MIME type as it can be unreliable for .md files\n    return {\n        valid: true\n    };\n}\nfunction validateDocumentContent(content) {\n    try {\n        DocumentContentSchema.parse({\n            content\n        });\n        return {\n            valid: true\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            return {\n                valid: false,\n                error: error.errors[0].message\n            };\n        }\n        return {\n            valid: false,\n            error: \"Invalid document content\"\n        };\n    }\n}\nfunction validateGenerationConfig(config) {\n    try {\n        const validatedConfig = GenerationConfigSchema.parse(config);\n        return {\n            valid: true,\n            data: validatedConfig\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            return {\n                valid: false,\n                error: error.errors[0].message\n            };\n        }\n        return {\n            valid: false,\n            error: \"Invalid configuration\"\n        };\n    }\n}\n// Rate Limiting Utilities\nclass RateLimiter {\n    constructor(maxRequests = 100, windowMs = 15 * 60 * 1000 // 15 minutes\n    ){\n        this.maxRequests = maxRequests;\n        this.windowMs = windowMs;\n        this.requests = new Map();\n    }\n    isAllowed(identifier) {\n        const now = Date.now();\n        const requests = this.requests.get(identifier) || [];\n        // Remove old requests outside the window\n        const validRequests = requests.filter((time)=>now - time < this.windowMs);\n        if (validRequests.length >= this.maxRequests) {\n            return false;\n        }\n        validRequests.push(now);\n        this.requests.set(identifier, validRequests);\n        return true;\n    }\n    getRemainingRequests(identifier) {\n        const now = Date.now();\n        const requests = this.requests.get(identifier) || [];\n        const validRequests = requests.filter((time)=>now - time < this.windowMs);\n        return Math.max(0, this.maxRequests - validRequests.length);\n    }\n}\n// Global rate limiter instance\nconst globalRateLimiter = new RateLimiter();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Ffluff_baal%2Frepos%2FAim-Assignment-7-8%2FReal%20assignment%2007%2Fragas-langgraph-vercel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();